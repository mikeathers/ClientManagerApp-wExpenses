@model DLS_Technologies.ViewModels.MileageFormViewModel

<div class="row">
    <div class="form-group col-sm-4">
        @Html.LabelFor(m => m.Origin)
        @Html.TextBoxFor(m => m.Origin, new { @class = "form-control", @placeholder = "Enter Origin" })
        @Html.ValidationMessageFor(m => m.Origin)
    </div>

    <div class="form-group col-sm-4">
        @Html.LabelFor(m => m.Destination)
        @Html.TextBoxFor(m => m.Destination, new { @class = "form-control", @placeholder = "Enter Destination" })
        @Html.ValidationMessageFor(m => m.Destination)
    </div>
    <div class="col-sm-offset-4"></div>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.TotalMiles)
    @Html.TextBoxFor(m => m.TotalMiles, new { @class = "form-control" })
    @Html.ValidationMessageFor(m => m.TotalMiles)
</div>


<div id="result" class="validation-failed"></div>

<div class="form-group">
    @Html.LabelFor(m => m.Cost)
    @Html.TextBoxFor(m => m.Cost, new { @class = "form-control", @readonly = "readonly" })
    @Html.ValidationMessageFor(m => m.Cost)
</div>


<script>
    
    $(document).ready(function () {

        var origin = document.getElementById('Origin');
        var destination = document.getElementById('Destination');
        var searchBox = new google.maps.places.SearchBox(origin);
        var searchBox = new google.maps.places.SearchBox(destination);

        function calculateDistance(origin, destination) {

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix(
                {
                    origins: [origin],
                    destinations: [destination],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.IMPERIAL,
                    avoidHighways: false,
                    avoidTolls: false
                }, callback);
        }

        function callback(response, status) {
            if (status != google.maps.DistanceMatrixStatus.OK) {
                $('#result').html(err);
            } else {
                var origin = response.originAddresses[0];
                var destination = response.destinationAddresses[0];
                if (response.rows[0].elements[0].status === "ZERO_RESULTS") {
                    $('#result').html("Issue with Origin or Destination entered, please make sure the spelling is correct and try again.").show();
                    $("#TotalMiles").val("");
                } else {
                    var distance = response.rows[0].elements[0].distance;
                    var distance_value = distance.value;
                    var distance_text = distance.text;
                    var miles = Math.ceil(distance_text.substring(0, distance_text.length - 3));

                    $("#TotalMiles").val(miles);
                }
            }
        }

        $("#TotalMiles").on("focusin", function () {
            var originResult = $("#Origin").val();
            var destinationResult = $("#Destination").val();
            if (destinationResult != null)
                calculateDistance(originResult, destinationResult);
        }).on("focusout", function () {
            var miles = $(this).val();
            var cost = miles * .25;
            var result = parseFloat(Math.round(cost * 100) / 100).toFixed(2);
            $("#Cost").val(result);
        });



    })
</script>
